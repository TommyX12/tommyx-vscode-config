{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "Large comment heading": {
        "scope": "python",
        "prefix": "ch",
        "body": [
            "################################",
            "# $1",
            "################################",
        ],
        "description": "Large comment heading"
    },
    "Large comment heading cpp": {
        "scope": "cpp,javascript,typescript,csharp",
        "prefix": "ch",
        "body": [
            "////////////////////////////////",
            "// $1",
            "////////////////////////////////",
        ],
        "description": "Large comment heading"
    },
	"Debug print value cpp": {
		"scope": "cpp",
		"prefix": "dpv",
		"body": [
			"std::cout << \"[debug] $TM_FILENAME:$TM_LINE_NUMBER $RANDOM_HEX $1 = \" << $1 << std::endl;",
		],
		"description": "Log output to console"
	},
    "Debug print cpp": {
        "scope": "cpp",
        "prefix": "dp",
        "body": [
            "std::cout << \"[debug] $TM_FILENAME:$TM_LINE_NUMBER $RANDOM_HEX$1\" << std::endl;",
        ],
        "description": "Log output to console"
    },
    "Debug print value in googletest": {
        "scope": "cpp",
        "prefix": "dptv",
        "body": [
            "std::cerr << \"[          ] [ INFO ] \" << \"[debug] $TM_FILENAME:$TM_LINE_NUMBER $RANDOM_HEX $1 = \" << $1 << std::endl;",
        ],
        "description": "Log output to console for googletest"
    },
    "Debug print in googletest": {
        "scope": "cpp",
        "prefix": "dpt",
        "body": [
            "std::cerr << \"[          ] [ INFO ] \" << \"[debug] $TM_FILENAME:$TM_LINE_NUMBER $RANDOM_HEX$1\" << std::endl;",
        ],
        "description": "Log output to console for googletest"
    },
    "Debug print typescript": {
        "scope": "typescript,typescriptreact,javascript,javascriptreact",
        "prefix": "dp",
        "body": [
            "console.log(\"[debug] $TM_FILENAME:$TM_LINE_NUMBER $RANDOM_HEX$1\");",
        ],
        "description": "Log output to console"
    },
    "Debug print value typescript": {
        "scope": "typescript,typescriptreact,javascript,javascriptreact",
        "prefix": "dpv",
        "body": [
            "console.log(\"[debug] $TM_FILENAME:$TM_LINE_NUMBER $RANDOM_HEX $1\", $1);",
        ],
        "description": "Log output to console"
    },
    "Debug print python": {
        "scope": "python",
        "prefix": "dp",
        "body": [
            "print(\"[debug] $TM_FILENAME:$TM_LINE_NUMBER $RANDOM_HEX$1\")",
        ],
        "description": "Log output to console"
    },
    "Debug print value python": {
        "scope": "python",
        "prefix": "dpv",
        "body": [
            "print(\"[debug] $TM_FILENAME:$TM_LINE_NUMBER $RANDOM_HEX $1 = {}\".format($1))",
        ],
        "description": "Log output to console"
    },
    "Simple Keras sequential model": {
        "scope": "python",
        "prefix": "ksmodel",
        "body": [
            "class ${1:MyModel}(Model):",
            "\tdef __init__(self, **kwargs):",
            "\t\tsuper().__init__(**kwargs)",
            "\t\tself.sequence = tf.keras.Sequential([",
            "\t\t\t${2:layers}",
            "\t\t])",
            "",
            "\tdef call(self, x):",
            "\t\treturn self.sequence(x)",
        ],
        "description": "Simple Keras model"
    },
    "Simple Keras model": {
        "scope": "python",
        "prefix": "kmodel",
        "body": [
            "class ${1:MyModel}(Model):",
            "\tdef __init__(self, **kwargs):",
            "\t\tsuper().__init__(**kwargs)",
            "",
            "\tdef call(self, x):",
            "\t\treturn x",
        ],
        "description": "Simple Keras model"
    },
    "Simple Keras layer": {
        "scope": "python",
        "prefix": "klayer",
        "body": [
            "class ${1:MyLayer}(Layer):",
            "\tdef __init__(self, **kwargs):",
            "\t\tsuper().__init__(**kwargs)",
            "",
            "\tdef call(self, x):",
            "\t\treturn x",
        ],
        "description": "Simple Keras layer"
    },
	"For loop const auto ref": {
		"scope": "cpp",
		"prefix": "forc",
		"body": [
			"for (const auto& ${1:item} : ${2:container}) {",
			"\t$3",
			"}",
		],
		"description": "For loop const auto ref"
	},
    "YYYYMMDDhhmmss String": {
        "prefix": "yyyymmddhhmmss",
        "body": [
            "$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE$CURRENT_HOUR$CURRENT_MINUTE$CURRENT_SECOND"
        ],
        "description": "YYYYMMDDhhmmss String"
    }
}